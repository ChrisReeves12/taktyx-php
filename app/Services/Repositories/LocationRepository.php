<?php
/**
 * The LocationRepository class definition.
 *
 * @author Christopher Lee Reeves <ChrisReeves12@yahoo.com>
 * @author Craig Reeves <reevescd1@gmail.com>
 **/

namespace App\Services\Repositories;

use App\Contracts\IRepository;
use App\Location;
use Illuminate\Http\Request;

/**
 * Class LocationRepository
 * @package App\Services\Repositories
 */
class LocationRepository extends BaseRepositoryImpl implements IRepository
{
	private $country_repository;

	/**
	 * LocationRepository constructor.
	 * @param CountryRepository $country_repository
	 */
	public function __construct(CountryRepository $country_repository)
	{
		$this->country_repository = $country_repository;
		$this->setClass(Location::class);
	}

	/**
	 * Save location
	 * @param Request $request
	 * @param string $foreign_key
	 * @return Location
	 */
	public function store($request, $foreign_key = null)
	{
		$ret_val = null;

		// get the country
		$country =  $this->country_repository->find($request->country_id);

		//get google maps API url
		$url = $this->api_url($request->address_line_1, $request->postal_code, $country);

		// get data from url
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_TIMEOUT, 3);
		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 3);
		$response = curl_exec($ch);

		if(!empty($response))
		{
			$content = json_decode($response);

			// save the coordinates
			if(!empty($content->results[0]))
			{
				// get address from api to validate if it matches with country user put in
				$located_country = $this->get_country_from_api($content);

				// validate if country from google and country from user match
				if($located_country == $country->name)
				{
					$location = new Location;
					$location->longitude = $content->results[0]->geometry->location->lng;
					$location->latitude = $content->results[0]->geometry->location->lat;
					$this->save($location);

					// return the location in case it is needed
					$ret_val = $location;
				}
			}
		}

		return $ret_val;
	}

	/**
	 * Update location
	 * @param Location $location
	 * @param Request $request
	 * @param string $foreign_key
	 * @return Location
	 */
	public function update($location, $request, $foreign_key = null)
	{
		$ret_val = null;

		// get the country
		$country =  $this->country_repository->find($request->country_id);

		//get google maps API url
		$url = $this->api_url($request->address_line_1, $request->postal_code, $country);

		// get data from url
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_TIMEOUT, 3);
		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 3);
		$response = curl_exec($ch);

		if(!empty($response))
		{
			$content = json_decode($response);

			// save the coordinates but make sure address is valid
			if(!empty($content->results[0]))
			{
				// get address from api to validate if it matches with country user put in
				$located_country = $this->get_country_from_api($content);

				// validate if country from google and country from user match
				if($located_country == $country->name)
				{
					$location->longitude = $content->results[0]->geometry->location->lng;
					$location->latitude = $content->results[0]->geometry->location->lat;
					$this->save($location);

					// return the location in case it is needed
					$ret_val = $location;
				}
			}
		}

		return $ret_val;
	}

	/**
	 * Create and return api url
	 * @param string $line_1
	 * @param string $postal_code
	 * @return string
	 */
	public function api_url($line_1, $postal_code)
	{
		// get google maps API url
		$raw_url = "https://maps.googleapis.com/maps/api/geocode/json?address={$line_1}, {$postal_code}&key=AIzaSyA-ZpyK3mtJuhML4IRtelZde-0f3jF8I6U";
		return str_replace(" ", "+", $raw_url);
	}

	/**
	 * Get country from API response
	 * @param \StdClass $content
	 * @return string
	 */
	public function get_country_from_api($content)
	{
		$located_country = '';

		// get country from JSON generated by google maps api
		foreach($content->results[0]->address_components as $component)
		{
			if($component->types[0] == "country")
			{
				$located_country = $component->long_name;
			}
		}

		return $located_country;
	}
}